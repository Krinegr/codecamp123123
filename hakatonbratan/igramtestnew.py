import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, types, Router
from aiogram import F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters.command import Command
import json
import Admin
logging.basicConfig(level=logging.INFO)
bot = Bot(token="Token here")
dp = Dispatcher()
router = Router

async def main():
    dp.include_routers(Admin.router)
    await dp.start_polling(bot)

class Message_to_group(StatesGroup):
    help_input = State()
@dp.message(Command("start"))
async def cmd_start(message: types.Message,state:FSMContext):
    kb = [
        [
            types.KeyboardButton(text="FAQ"),
            types.KeyboardButton(text="–ü–æ–º–æ–≥–∏—Ç–µ")
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –û–û–û _–¢–º—ã–≤ –±–∞–±–ª–∞_"
    )
    hello_user = " ‚öôÔ∏è–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–æ–º–ø–∞–Ω–∏–∏ –û–û–û '–¢–º—ã–≤ –±–∞–±–ª–∞' \n‚å®Ô∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –æ–ø—Ü–∏—é –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ"
    await message.answer( hello_user, reply_markup=keyboard)

@dp.message(F.text.lower() == "faq")
async def with_puree(message: types.Message):
    await message.reply("üîÑ–ï—Å–ª–∏ —Å–∞–π—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à –∫–æ–º–ø—å—é—Ç–µ—Ä.\n‚öôÔ∏è–ï—Å–ª–∏ FAQ –æ–∫–∞–∑–∞–ª–∞—Å—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø–æ–º–æ–≥–∏—Ç–µ' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –æ –ø–æ–º–æ—â–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")

@dp.message(F.text.lower() == "–ø–æ–º–æ–≥–∏—Ç–µ")
async def without_puree(message: types.Message,state:FSMContext):
    await message.reply("‚ö†Ô∏è–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. \n‚úâÔ∏è–ú–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª—É—á–∏–ª–∏—Å—å –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Å–∞–π—Ç–æ–º. \nüì±–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", reply_markup=types.ReplyKeyboardRemove())
    global schet
    schet += 1
    return await state.set_state(Message_to_group.help_input)
schet = 0
@dp.message(Message_to_group.help_input)
async def obrabotka_zaprosa(message: types.Message, state: FSMContext ):
    text = message.text
    data = await state.get_data()
    if text != "–°—Ç–æ–ø":
        await message.reply("üì•–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        mass = data.get("message_saved", [])
        mass.append(text)
        await state.update_data(message_saved = mass)
    else:
        await message.reply("üì§–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        mass = data.get("message_saved")
        textfromuser = "\n".join(mass)
        username = message.from_user.username
        spisok = {
            "ID": schet,
            "text": textfromuser,
            "name": username
        }
        if os.path.exists("bdbd.json") and os.path.getsize("bdbd.json") > 0:
            with open("bdbd.json", 'r') as file:
                bata = json.load(file)
        else:
            bata = []
        bata.append(spisok)
        with open('bdbd.json', 'w') as file:
            json.dump(bata, file, indent=4)
        print(bata)
        print(schet)
        await state.clear()
        #messageforgroup = "\n".join(mass)
        #  await bot.send_message(-4681080381, "–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ –ø–æ–º–æ—â–∏, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ, –æ—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ /admin    " + "\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @" + message.from_user.username)
        #await bot.send_message(-4681080381, messageforgroup + "\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @" + message.from_user.username)

if __name__ == "__main__":
    asyncio.run(main())
